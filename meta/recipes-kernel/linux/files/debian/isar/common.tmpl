#!/bin/bash
# Copyright (c) Mentor Graphics, a Siemens business, 2019
# SPDX-License-Identifier: MIT

set -e

# Isar settings
ARCH=${KERNEL_ARCH}
KERNEL_PKG_IMAGE=linux-image-${KERNEL_NAME_PROVIDED}
KERNEL_PKG_KERN_HEADERS=linux-headers-${KERNEL_NAME_PROVIDED}
KERNEL_PKG_LIBC_HEADERS=linux-libc-dev
KERNEL_PKG_LIBC_HEADERS_CROSS=linux-libc-dev-${DISTRO_ARCH}-cross
KERNEL_PKG_KERN_KBUILD=linux-kbuild-${KERNEL_NAME_PROVIDED}
KERNEL_PKG_KERN_KBUILD_CROSS=${KERNEL_PKG_KERN_KBUILD}-${DISTRO_ARCH}-cross

# Force creating debian package with valid host arch for -native build
# Use a cross build to comply with arch specific kernel defconfigs
# The scripts and tools are always created for host arch
if echo "${DEB_BUILD_PROFILES}" | grep -q -e "cross" -e "kbuild"
then
    CROSS_COMPILE=$(dpkg-architecture -f -A ${DISTRO_ARCH} -q DEB_TARGET_GNU_TYPE)-
fi

# Required from building a compat vDSO on arm64
if [ "${ISAR_ENABLE_COMPAT_ARCH}" = "1" ] && [ "${DISTRO_ARCH}" = "arm64" ]; then
    CROSS_COMPILE_COMPAT=$(dpkg-architecture -f -A ${COMPAT_DISTRO_ARCH} -q DEB_TARGET_GNU_TYPE)-
fi

# Constants
KCONF=.config

# Target directories
deb_top_dir=${S}/debian
deb_img_dir=${deb_top_dir}/${KERNEL_PKG_IMAGE}
deb_dbg_dir=${deb_img_dir}-dbg
deb_kern_hdr_dir=${deb_top_dir}/${KERNEL_PKG_KERN_HEADERS}
deb_libc_hdr_dir=${deb_top_dir}/${KERNEL_PKG_LIBC_HEADERS}
deb_libc_hdr_cross_dir=${deb_top_dir}/${KERNEL_PKG_LIBC_HEADERS_CROSS}
deb_kern_kbuild_dir=${deb_top_dir}/${KERNEL_PKG_KERN_KBUILD}
deb_kern_kbuild_cross_dir=${deb_top_dir}/${KERNEL_PKG_KERN_KBUILD_CROSS}

# Array of packages to be generated
declare -A kern_pkgs

main() {
    local target=${1}

    if [ ! -f ${S}/debian/isar/${target} ]; then
        echo "error: ${target} is not a supported build target!" >&2
        return 1
    fi

    # create do_<x> variables for each package to be generated
    for p in $(unset DEB_HOST_ARCH; dh_listpackages); do
        kern_pkgs["${p}"]="1"
    done

    # variables to be exported
    export ARCH CROSS_COMPILE CROSS_COMPILE_COMPAT

    # are we cross-compiling?
    BUILD_ARCH=$(dpkg-architecture -qDEB_BUILD_ARCH)
    if [ "${BUILD_ARCH}" = "${DISTRO_ARCH}" ]; then
        # no, make sure CROSS_COMPILE isn't set
        unset CROSS_COMPILE
    fi

    # call the actual target script
    do_${target}
}
